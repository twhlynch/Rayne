#!/usr/bin/env python3
#
# Copyright (C) 2016 Google, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

"""Generate Vulkan dispatch table.
"""

import os
import sys

from dispatchTableClasses import *
from dispatchTableParsedHeader import *

def generate_header(guard):
    lines = []
    lines.append("// This file is generated.")
    lines.append("#ifndef %s" % guard)
    lines.append("#define %s" % guard)
    lines.append("")
    lines.append('#include "vulkan.h"')
    lines.append("")
    lines.append("namespace vk {")
    lines.append("")

    for ext in extensions:
        if ext.guard:
            lines.append("#ifdef %s" % ext.guard)

        lines.append("// %s" % ext.name)
        for cmd in ext.commands:
            lines.append("extern PFN_vk%s %s;" % (cmd.name, cmd.name))

        if ext.guard:
            lines.append("#endif")
        lines.append("")

    lines.append("void init_dispatch_table_top(PFN_vkGetInstanceProcAddr get_instance_proc_addr);")
    lines.append("void init_dispatch_table_middle(VkInstance instance, bool include_bottom);")
    lines.append("void init_dispatch_table_bottom(VkInstance instance, VkDevice dev);")
    lines.append("")
    lines.append("} // namespace vk")
    lines.append("")
    lines.append("#endif // %s" % guard)

    return "\n".join(lines)

def get_proc_addr(dispatchable, cmd, guard=None):
    if dispatchable == "dev":
        func = "GetDeviceProcAddr"
    else:
        func = "GetInstanceProcAddr"

    c = "    %s = reinterpret_cast<PFN_vk%s>(%s(%s, \"vk%s\"));" % \
            (cmd.name, cmd.name, func, dispatchable, cmd.name)

    if guard:
        c = ("#ifdef %s\n" % guard) + c + "\n#endif"

    return c

def generate_source(header):
    lines = []
    lines.append("// This file is generated.")
    lines.append("#include \"%s\"" % header)
    lines.append("")
    lines.append("namespace vk {")
    lines.append("")

    commands_by_types = {}
    get_instance_proc_addr = None
    get_device_proc_addr = None
    for ext in extensions:
        if ext.guard:
            lines.append("#ifdef %s" % ext.guard)

        for cmd in ext.commands:
            lines.append("PFN_vk%s %s;" % (cmd.name, cmd.name))

            if cmd.ty not in commands_by_types:
                commands_by_types[cmd.ty] = []
            commands_by_types[cmd.ty].append([cmd, ext.guard])

            if cmd.name == "GetInstanceProcAddr":
                get_instance_proc_addr = cmd
            elif cmd.name == "GetDeviceProcAddr":
                get_device_proc_addr = cmd

        if ext.guard:
            lines.append("#endif")
    lines.append("")

    lines.append("void init_dispatch_table_top(PFN_vkGetInstanceProcAddr get_instance_proc_addr)")
    lines.append("{")
    lines.append("    GetInstanceProcAddr = get_instance_proc_addr;")
    lines.append("")
    for cmd, guard in commands_by_types[Command.LOADER]:
        lines.append(get_proc_addr("VK_NULL_HANDLE", cmd, guard))
    lines.append("}")
    lines.append("")

    lines.append("void init_dispatch_table_middle(VkInstance instance, bool include_bottom)")
    lines.append("{")
    lines.append(get_proc_addr("instance", get_instance_proc_addr))
    lines.append("")
    for cmd, guard in commands_by_types[Command.INSTANCE]:
        if cmd == get_instance_proc_addr:
            continue
        lines.append(get_proc_addr("instance", cmd, guard))
    lines.append("")
    lines.append("    if (!include_bottom)")
    lines.append("        return;")
    lines.append("")
    for cmd, guard in commands_by_types[Command.DEVICE]:
        lines.append(get_proc_addr("instance", cmd, guard))
    lines.append("}")
    lines.append("")

    lines.append("void init_dispatch_table_bottom(VkInstance instance, VkDevice dev)")
    lines.append("{")
    lines.append(get_proc_addr("instance", get_device_proc_addr))
    lines.append(get_proc_addr("dev", get_device_proc_addr))
    lines.append("")
    for cmd, guard in commands_by_types[Command.DEVICE]:
        if cmd == get_device_proc_addr:
            continue
        lines.append(get_proc_addr("dev", cmd, guard))
    lines.append("}")

    lines.append("")
    lines.append("} // namespace vk")

    return "\n".join(lines)

def parse_vulkan_h(filename):
    extensions = []

    lines = []

    with open(filename, "r") as f:
        current_ext = None
        ext_guard = None
        spec_version = None

        for line in f:
            line = line.strip()
            if line.startswith('#include "'):
                includefilename = line[10:-1]
                includedir = os.path.dirname(filename)
                includefilename = os.path.join(includedir, includefilename)
                with open(includefilename, "r") as fi:
                    for line in fi:
                        line = line.strip()
                        lines.append(line)
            else:
                lines.append(line)

    for line in lines:
        line = line.strip()

        if line.startswith("#define VK_API_VERSION"):
            minor_end = line.rfind(",")
            minor_begin = line.rfind(",", 0, minor_end) + 1
            spec_version = int(line[minor_begin:minor_end])
            # add core
            current_ext = Extension("VK_core", spec_version)
            extensions.append(current_ext)
        elif Command.valid_c_typedef(line):
            current_ext.add_command(Command.from_c_typedef(line))
        elif line.startswith("#ifdef VK_USE_PLATFORM"):
            guard_begin = line.find(" ") + 1
            ext_guard = line[guard_begin:]
        elif line.startswith("#define") and "SPEC_VERSION " in line:
            version_begin = line.rfind(" ") + 1
            spec_version = int(line[version_begin:])
        elif line.startswith("#define") and "EXTENSION_NAME " in line:
            name_end = line.rfind("\"")
            name_begin = line.rfind("\"", 0, name_end) + 1
            name = line[name_begin:name_end]
            # add extension
            current_ext = Extension(name, spec_version, ext_guard)
            extensions.append(current_ext)
        elif ext_guard and line.startswith("#endif") and ext_guard in line:
            ext_guard = None

    newFilePath = os.path.dirname(os.path.abspath(__file__))
    newFilePath = os.path.join(newFilePath, "dispatchTableParsedHeader.py")
    with open(newFilePath, "w") as f:
        f.write("from dispatchTableClasses import *\n")
        for ext in extensions:
            f.write("%s = %s\n" % (ext.name.lower()+"_"+str(ext.version), repr(ext)))
            f.write("\n")

        f.write("extensions = [\n")
        for ext in extensions:
            f.write("    %s,\n" % (ext.name.lower()+"_"+str(ext.version)))
        f.write("]\n")

if __name__ == "__main__":
    if sys.argv[1] == "parse":
        parse_vulkan_h(sys.argv[2])
    else:
        filename = sys.argv[1]
        base = os.path.basename(filename)
        contents = []

        if base.endswith(".h"):
            contents = generate_header(base.replace(".", "_").upper())
        elif base.endswith(".cpp"):
            contents = generate_source(base.replace(".cpp", ".h"))

        with open(filename, "w") as f:
            f.write(contents)
